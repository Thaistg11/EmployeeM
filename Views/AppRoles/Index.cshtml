@using Microsoft.AspNetCore.Identity
@model IEnumerable<IdentityRole>

@{
    ViewData["Title"] = "Application Roles";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <title>EmployeeM</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lato">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">


    <style>
        body, h1, h2, h3, h4, h5, h6 {
            font-family: "Lato", sans-serif
        }

        .w3-bar, h1, button {
            font-family: "Montserrat", sans-serif
        }

        .fa-anchor, .fa-coffee {
            font-size: 200px
        }
    </style>
</head>

<h1>View Roles</h1>
<body> 
<p>
    <a asp-action="Create">Create Role</a>
</p>

@if (Model != null && Model.Any()) // Null check and ensure Model is not empty
{
	<table class="table remove-margin-b ">
		<thead>
			<tr>
				<th>@Html.DisplayNameFor(model => model.Id)</th>

				<th>@Html.DisplayNameFor(model => model.Name)</th>

				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in Model)
			{
				<tr>
					<td>@Html.DisplayFor(modelItem => item.Id)</td>
					<td>@Html.DisplayFor(modelItem => item.Name)</td>
				</tr>
			}
		</tbody>
    </table>
}
else
{
    <h1>No roles found.</h1> <!-- Fallback message when Model is null or empty -->
}
</body>
